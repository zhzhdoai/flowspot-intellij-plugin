/*
 * Copyright 2024 FlowSpot plugin contributors
 *
 * This file is part of IntelliJ FlowSpot plugin.
 *
 * IntelliJ FlowSpot plugin is free software: you can redistribute it 
 * and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of 
 * the License, or (at your option) any later version.
 *
 * IntelliJ FlowSpot plugin is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with IntelliJ FlowSpot plugin.
 * If not, see <http://www.gnu.org/licenses/>.
 */
package com.flowspot.intellij.model;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import omni.flowspot.core.FlowSpotBugInstance;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * FlowSpot 漏洞数据模型
 * 包含完整的漏洞信息，用于 UI 展示
 */
public class FlowSpotVulnerability {
    
    private final String id;
    private final String type;
    private final String category;
    private final String title;
    private final String description;
    private final int priority;
    private final String severity;
    private final FlowSpotLocation primaryLocation;
    private final List<FlowSpotLocation> dataFlowPath;
    private final List<FlowSpotAnnotation> annotations;
    private final String htmlDetails;
    private final FlowSpotBugInstance originalBugInstance;
    
    public FlowSpotVulnerability(@NotNull String id,
                                @NotNull String type,
                                @NotNull String category,
                                @NotNull String title,
                                @NotNull String description,
                                int priority,
                                @NotNull String severity,
                                @NotNull FlowSpotLocation primaryLocation,
                                @NotNull List<FlowSpotLocation> dataFlowPath,
                                @NotNull List<FlowSpotAnnotation> annotations,
                                @Nullable String htmlDetails,
                                @NotNull FlowSpotBugInstance originalBugInstance) {
        this.id = id;
        this.type = type;
        this.category = category;
        this.title = title;
        this.description = description;
        this.priority = priority;
        this.severity = severity;
        this.primaryLocation = primaryLocation;
        this.dataFlowPath = new ArrayList<>(dataFlowPath);
        this.annotations = new ArrayList<>(annotations);
        this.htmlDetails = htmlDetails;
        this.originalBugInstance = originalBugInstance;
    }
    
    // Getters
    @NotNull
    public String getId() { return id; }
    
    @NotNull
    public String getType() { return type; }
    
    @NotNull
    public String getCategory() { return category; }
    
    @NotNull
    public String getTitle() { return title; }
    
    @NotNull
    public String getDescription() { return description; }
    
    public int getPriority() { return priority; }
    
    @NotNull
    public String getSeverity() { return severity; }
    
    @NotNull
    public FlowSpotLocation getPrimaryLocation() { return primaryLocation; }
    
    @NotNull
    public List<FlowSpotLocation> getDataFlowPath() { return new ArrayList<>(dataFlowPath); }
    
    /**
     * 获取所有位置信息（包括主要位置和数据流路径）
     */
    @NotNull
    public List<FlowSpotLocation> getLocations() {
        List<FlowSpotLocation> allLocations = new ArrayList<>();
        if (primaryLocation != null) {
            allLocations.add(primaryLocation);
        }
        allLocations.addAll(dataFlowPath);
        return allLocations;
    }
    
    @NotNull
    public List<FlowSpotAnnotation> getAnnotations() { return new ArrayList<>(annotations); }
    
    @Nullable
    public String getHtmlDetails() { return htmlDetails; }
    
    @NotNull
    public FlowSpotBugInstance getOriginalBugInstance() { return originalBugInstance; }
    
    /**
     * 获取优先级字符串表示
     */
    @NotNull
    public String getPriorityString() {
        switch (priority) {
            case 1: return "High";
            case 2: return "Medium";
            case 3: return "Low";
            default: return "Unknown";
        }
    }
    
    /**
     * 获取漏洞的简短描述，用于树节点显示
     * 格式：name + classname + 行号
     */
    @NotNull
    public String getShortDisplayText() {
        FlowSpotLocation primaryLoc = getPrimaryLocation();
        if (primaryLoc != null) {
            // 提取类名（不包含包名）
            String className = primaryLoc.getClassName()+"#"+primaryLoc.getMethodName();
            // 格式：规则名称 + 类名 + 行号
            String ruleName = getType().replaceAll("_\\d+$", ""); // 移除数字后缀
            return String.format("%s - %s:%d", 
                               ruleName,
                               className != null ? className : primaryLoc.getFileName(),
                               primaryLoc.getStartLine());
        } else {
            // 如果没有位置信息，只显示规则名称
            String ruleName = getType().replaceAll("_\\d+$", "");
            return ruleName;
        }
    }
    
    /**
     * 获取漏洞的详细描述，用于详情面板
     */
    @NotNull
    public String getDetailedDisplayText() {
        StringBuilder sb = new StringBuilder();
        sb.append("Type: ").append(type).append("\n");
        sb.append("Category: ").append(category).append("\n");
        sb.append("Priority: ").append(getPriorityString()).append("\n");
        sb.append("Severity: ").append(severity).append("\n");
        sb.append("Location: ").append(primaryLocation.toString()).append("\n");
        sb.append("Description: ").append(description).append("\n");
        
        if (!dataFlowPath.isEmpty()) {
            sb.append("\nData Flow Path:\n");
            for (int i = 0; i < dataFlowPath.size(); i++) {
                sb.append("  ").append(i + 1).append(". ").append(dataFlowPath.get(i).toString()).append("\n");
            }
        }
        
        return sb.toString();
    }
    
    @Override
    public String toString() {
        return getShortDisplayText();
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        FlowSpotVulnerability that = (FlowSpotVulnerability) obj;
        return id.equals(that.id);
    }
    
    @Override
    public int hashCode() {
        return id.hashCode();
    }
}
