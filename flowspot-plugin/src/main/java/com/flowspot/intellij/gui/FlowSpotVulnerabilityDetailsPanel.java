/*
 * Copyright 2024 FlowSpot plugin contributors
 *
 * This file is part of IntelliJ FlowSpot plugin.
 *
 * IntelliJ FlowSpot plugin is free software: you can redistribute it 
 * and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of 
 * the License, or (at your option) any later version.
 *
 * IntelliJ FlowSpot plugin is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with IntelliJ FlowSpot plugin.
 * If not, see <http://www.gnu.org/licenses/>.
 */
package com.flowspot.intellij.gui;

import com.flowspot.intellij.core.FlowSpotLogManager;
import com.flowspot.intellij.model.FlowSpotAnnotation;
import com.flowspot.intellij.model.FlowSpotLocation;
import com.flowspot.intellij.model.FlowSpotVulnerability;
import com.flowspot.intellij.model.FlowSpotVulnerabilityCollection;
import com.flowspot.intellij.service.FlowSpotFilterManager;
import com.flowspot.intellij.model.FlowSpotFilterRule;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Collection;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileEditor.OpenFileDescriptor;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.SelectionModel;
import com.intellij.openapi.editor.CaretModel;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.markup.HighlighterLayer;
import com.intellij.openapi.editor.markup.MarkupModel;
import com.intellij.openapi.editor.markup.RangeHighlighter;
import com.intellij.openapi.editor.markup.TextAttributes;
import com.intellij.openapi.editor.colors.EditorColors;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.ui.JBColor;
import omni.flowspot.annotations.FlowSpotSourceLineAnnotation;

/**
 * FlowSpot 漏洞详情面板
 * 显示选中漏洞的详细信息
 */
public class FlowSpotVulnerabilityDetailsPanel extends JPanel {
    
    /**
     * 过滤规则变化监听器接口
     */
    public interface FilterRuleChangeListener {
        void onFilterRuleChanged();
    }
    
    private final Project project;
    private final FlowSpotFilterManager filterManager;
    private JTabbedPane tabbedPane;
    private JPanel overviewPanel;
    private JTable dataFlowTable;
    private JTable annotationsTable;
    private JEditorPane detailsPane;
    
    private FlowSpotVulnerability currentVulnerability;
    private FilterRuleChangeListener filterRuleChangeListener;
    
    
    public FlowSpotVulnerabilityDetailsPanel(@NotNull Project project) {
        this.project = project;
        this.filterManager = FlowSpotFilterManager.getInstance(project);
        initializeUI();
    }
    
    /**
     * 设置过滤规则变化监听器
     */
    public void setFilterRuleChangeListener(FilterRuleChangeListener listener) {
        this.filterRuleChangeListener = listener;
    }
    
    /**
     * 初始化UI组件
     */
    private void initializeUI() {
        setLayout(new BorderLayout());
        
        // 创建标签页面板
        tabbedPane = new JTabbedPane();
        
        // 概览标签页
        createOverviewTab();
        
        // 数据流标签页
        createDataFlowTab();
        
        // 注解标签页
        createAnnotationsTab();
        
        // 详细信息标签页
        createDetailsTab();
        
        add(tabbedPane, BorderLayout.CENTER);
        
        // 初始状态显示空信息
        showEmptyState();
    }
    
    /**
     * 创建概览标签页
     */
    private void createOverviewTab() {
        overviewPanel = new JPanel();
        overviewPanel.setLayout(new BoxLayout(overviewPanel, BoxLayout.Y_AXIS));
        overviewPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JScrollPane scrollPane = new JScrollPane(overviewPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        tabbedPane.addTab("Overview", scrollPane);
    }
    
    /**
     * 创建数据流标签页
     */
    private void createDataFlowTab() {
        JPanel dataFlowPanel = new JPanel(new BorderLayout());
        
        // 创建表格
        String[] columnNames = {"nodeType", "tracked", "line", "method", "file"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        dataFlowTable = new JTable(model);
        dataFlowTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataFlowTable.getTableHeader().setReorderingAllowed(false);
        
        // 设置列宽
        dataFlowTable.getColumnModel().getColumn(0).setPreferredWidth(80);  // nodeType
        dataFlowTable.getColumnModel().getColumn(1).setPreferredWidth(100); // tracked
        dataFlowTable.getColumnModel().getColumn(2).setPreferredWidth(60);  // line
        dataFlowTable.getColumnModel().getColumn(3).setPreferredWidth(200); // method
        dataFlowTable.getColumnModel().getColumn(4).setPreferredWidth(250); // file
        
        // 添加单击监听器，实现文件跳转功能
        dataFlowTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    int row = dataFlowTable.getSelectedRow();
                    if (row >= 0) {
                        navigateToSource(row);
                    }
                }
            }
            
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showDataFlowContextMenu(e);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showDataFlowContextMenu(e);
                }
            }
        });
        
        JScrollPane scrollPane = new JScrollPane(dataFlowTable);
        dataFlowPanel.add(scrollPane, BorderLayout.CENTER);
        
        // 添加过滤按钮面板
        JPanel filterButtonPanel = createFilterButtonPanel();
        dataFlowPanel.add(filterButtonPanel, BorderLayout.SOUTH);
        
        tabbedPane.addTab("Data Flow", dataFlowPanel);
    }
    
    /**
     * 创建过滤按钮面板
     */
    private JPanel createFilterButtonPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        JButton addFilterButton = new JButton("Add Filter Rule");
        addFilterButton.setToolTipText("Add filter rule for selected data flow node");
        addFilterButton.addActionListener(e -> addFilterForSelectedNode());
        
        JButton manageFiltersButton = new JButton("Manage Filters");
        manageFiltersButton.setToolTipText("Manage all filter rules");
        manageFiltersButton.addActionListener(e -> showFilterManagementDialog());
        
        panel.add(addFilterButton);
        panel.add(manageFiltersButton);
        
        return panel;
    }
    
    /**
     * 显示数据流右键菜单
     */
    private void showDataFlowContextMenu(MouseEvent e) {
        int row = dataFlowTable.rowAtPoint(e.getPoint());
        if (row >= 0) {
            dataFlowTable.setRowSelectionInterval(row, row);
            
            JPopupMenu popup = new JPopupMenu();
            
            JMenuItem navigateItem = new JMenuItem("Navigate to Source");
            navigateItem.addActionListener(event -> navigateToSource(row));
            popup.add(navigateItem);
            
            popup.addSeparator();
            
            // 获取当前行的数据
            FlowSpotLocation location = getLocationFromTableRow(row);
            if (location != null && location.getClassName() != null && location.getMethodName() != null) {
                JMenu filterMenu = new JMenu("Add Filter Rule");
                
                String className = location.getClassName();
                String methodName = location.getMethodName();
                String simpleClassName = getSimpleClassName(className);
                
                JMenuItem exactMatchItem = new JMenuItem("Exact Match (" + simpleClassName + "." + methodName + ")");
                exactMatchItem.addActionListener(event -> addFilterRule(className, methodName, FlowSpotFilterRule.FilterType.EXACT_MATCH));
                filterMenu.add(exactMatchItem);
                
                JMenuItem classMatchItem = new JMenuItem("Class Match (" + simpleClassName + ".*)");
                classMatchItem.addActionListener(event -> addFilterRule(className, methodName, FlowSpotFilterRule.FilterType.CLASS_MATCH));
                filterMenu.add(classMatchItem);
                
                JMenuItem methodMatchItem = new JMenuItem("Method Match (*." + methodName + ")");
                methodMatchItem.addActionListener(event -> addFilterRule(className, methodName, FlowSpotFilterRule.FilterType.METHOD_MATCH));
                filterMenu.add(methodMatchItem);
                
                popup.add(filterMenu);
            }
            
            popup.show(dataFlowTable, e.getX(), e.getY());
        }
    }
    
    /**
     * 为选中的节点添加过滤规则
     */
    private void addFilterForSelectedNode() {
        int selectedRow = dataFlowTable.getSelectedRow();
        if (selectedRow >= 0) {
            FlowSpotLocation location = getLocationFromTableRow(selectedRow);
            if (location != null && location.getClassName() != null && location.getMethodName() != null) {
                showFilterOptionsDialog(location);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Please select a valid data flow node with class and method information.", 
                    "Invalid Selection", 
                    JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                "Please select a data flow node first.", 
                "No Selection", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * 显示过滤选项对话框
     */
    private void showFilterOptionsDialog(FlowSpotLocation location) {
        String[] options = {
            "Filter Exact Match (" + getSimpleClassName(location.getClassName()) + "." + location.getMethodName() + ")",
            "Filter Class (" + getSimpleClassName(location.getClassName()) + ".*)",
            "Filter Method (*." + location.getMethodName() + ")",
            "Cancel"
        };
        
        int choice = JOptionPane.showOptionDialog(
            this,
            "Choose filter type for data flow node:\n" + 
            "Class: " + location.getClassName() + "\n" +
            "Method: " + location.getMethodName(),
            "Add Filter Rule",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
        );
        
        FlowSpotFilterRule.FilterType filterType = null;
        switch (choice) {
            case 0: filterType = FlowSpotFilterRule.FilterType.EXACT_MATCH; break;
            case 1: filterType = FlowSpotFilterRule.FilterType.CLASS_MATCH; break;
            case 2: filterType = FlowSpotFilterRule.FilterType.METHOD_MATCH; break;
            default: return; // Cancel
        }
        
        addFilterRule(location.getClassName(), location.getMethodName(), filterType);
    }
    
    /**
     * 添加过滤规则
     */
    private void addFilterRule(String className, String methodName, FlowSpotFilterRule.FilterType filterType) {
        FlowSpotFilterRule rule = null;
        switch (filterType) {
            case EXACT_MATCH:
                rule = filterManager.createExactMatchRule(className, methodName,
                    "Filter exact match: " + getSimpleClassName(className) + "." + methodName);
                break;
            case CLASS_MATCH:
                rule = filterManager.createClassMatchRule(className,
                    "Filter class: " + getSimpleClassName(className));
                break;
            case METHOD_MATCH:
                rule = filterManager.createMethodMatchRule(methodName,
                    "Filter method: " + methodName);
                break;
        }
        
        if (rule != null) {
            filterManager.addFilterRule(rule);
            JOptionPane.showMessageDialog(this,
                "Filter rule added successfully!\n" +
                "Rule: " + rule.getDisplayName(),
                "Filter Rule Added",
                JOptionPane.INFORMATION_MESSAGE);
            
            // 通知监听器过滤规则已变化
            if (filterRuleChangeListener != null) {
                System.out.println("FlowSpotVulnerabilityDetailsPanel: 通知监听器过滤规则已变化");
                filterRuleChangeListener.onFilterRuleChanged();
            } else {
                System.out.println("FlowSpotVulnerabilityDetailsPanel: 监听器为空，无法通知刷新");
            }
        }
    }
    
    /**
     * 显示过滤管理对话框
     */
    private void showFilterManagementDialog() {
        FlowSpotFilterManagementDialog dialog = new FlowSpotFilterManagementDialog(project, filterManager);
        dialog.setVisible(true);
        
        // 如果规则有变化，通知监听器刷新显示
        if (dialog.isRulesChanged()) {
            if (filterRuleChangeListener != null) {
                System.out.println("FlowSpotVulnerabilityDetailsPanel: 过滤管理对话框中规则有变化，通知监听器");
                filterRuleChangeListener.onFilterRuleChanged();
            } else {
                System.out.println("FlowSpotVulnerabilityDetailsPanel: 监听器为空，无法通知刷新");
            }
        } else {
            System.out.println("FlowSpotVulnerabilityDetailsPanel: 过滤管理对话框中规则没有变化");
        }
    }
    
    /**
     * 从表格行获取位置信息
     */
    private FlowSpotLocation getLocationFromTableRow(int row) {
        if (currentVulnerability == null) return null;
        
        List<FlowSpotLocation> locations = currentVulnerability.getDataFlowPath();
        if (row >= 0 && row < locations.size()) {
            return locations.get(row);
        }
        return null;
    }
    
    /**
     * 获取简单类名（去掉包名）
     */
    private String getSimpleClassName(String fullClassName) {
        if (fullClassName == null) return "Unknown";
        int lastDot = fullClassName.lastIndexOf('.');
        return lastDot >= 0 ? fullClassName.substring(lastDot + 1) : fullClassName;
    }
    
    /**
     * 创建注解标签页
     */
    private void createAnnotationsTab() {
        String[] columnNames = {"Type", "Description", "Value"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        annotationsTable = new JTable(model);
        annotationsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        annotationsTable.getTableHeader().setReorderingAllowed(false);
        
        // 设置列宽
        annotationsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        annotationsTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        annotationsTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        
        JScrollPane scrollPane = new JScrollPane(annotationsTable);
        tabbedPane.addTab("Annotations", scrollPane);
    }
    
    /**
     * 创建详细信息标签页
     */
    private void createDetailsTab() {
        detailsPane = new JEditorPane();
        detailsPane.setContentType("text/html");
        detailsPane.setEditable(false);
        
        JScrollPane scrollPane = new JScrollPane(detailsPane);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        tabbedPane.addTab("Details", scrollPane);
    }
    
    /**
     * 设置要显示的漏洞
     */
    public void setVulnerability(@Nullable FlowSpotVulnerability vulnerability) {
        this.currentVulnerability = vulnerability;
        
        if (vulnerability == null) {
            showEmptyState();
        } else {
            updateOverview(vulnerability);
            updateDataFlow(vulnerability);
            updateAnnotations(vulnerability);
            updateDetails(vulnerability);
        }
    }
    
    /**
     * 显示空状态
     */
    private void showEmptyState() {
        // 清空概览面板
        overviewPanel.removeAll();
        JLabel emptyLabel = new JLabel("Select a vulnerability to view details");
        emptyLabel.setHorizontalAlignment(SwingConstants.CENTER);
        emptyLabel.setFont(emptyLabel.getFont().deriveFont(Font.ITALIC));
        overviewPanel.add(emptyLabel);
        overviewPanel.revalidate();
        overviewPanel.repaint();
        
        // 清空表格
        ((DefaultTableModel) dataFlowTable.getModel()).setRowCount(0);
        ((DefaultTableModel) annotationsTable.getModel()).setRowCount(0);
        
        // 清空详细信息
        detailsPane.setText("");
    }
    
    /**
     * 更新概览信息
     */
    private void updateOverview(@NotNull FlowSpotVulnerability vulnerability) {
        overviewPanel.removeAll();
        
        // 基本信息
        addInfoField("Type:", vulnerability.getType());
        addInfoField("Category:", vulnerability.getCategory());
        addInfoField("Severity:", vulnerability.getSeverity());
        addInfoField("Priority:", String.valueOf(vulnerability.getPriority()));
        
        overviewPanel.add(Box.createVerticalStrut(10));
        
        // 标题和描述
        addInfoSection("Title:", vulnerability.getTitle());
        addInfoSection("Description:", vulnerability.getDescription());
        
        // 位置信息
        if (vulnerability.getPrimaryLocation() != null) {
            overviewPanel.add(Box.createVerticalStrut(10));
            addInfoSection("Primary Location:", vulnerability.getPrimaryLocation().getDisplayText());
        }
        
        // 统计信息
        if (!vulnerability.getDataFlowPath().isEmpty()) {
            overviewPanel.add(Box.createVerticalStrut(10));
            addInfoField("Data Flow Steps:", String.valueOf(vulnerability.getDataFlowPath().size()));
        }
        
        if (!vulnerability.getAnnotations().isEmpty()) {
            addInfoField("Annotations:", String.valueOf(vulnerability.getAnnotations().size()));
        }
        
        overviewPanel.revalidate();
        overviewPanel.repaint();
    }
    
    /**
     * 添加信息字段
     */
    private void addInfoField(String label, String value) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 2));
        
        JLabel labelComponent = new JLabel(label);
        labelComponent.setFont(labelComponent.getFont().deriveFont(Font.BOLD));
        labelComponent.setPreferredSize(new Dimension(100, labelComponent.getPreferredSize().height));
        
        JLabel valueComponent = new JLabel(value != null ? value : "N/A");
        
        panel.add(labelComponent);
        panel.add(valueComponent);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, panel.getPreferredSize().height));
        
        overviewPanel.add(panel);
    }
    
    /**
     * 添加信息段落
     */
    private void addInfoSection(String label, String value) {
        JLabel labelComponent = new JLabel(label);
        labelComponent.setFont(labelComponent.getFont().deriveFont(Font.BOLD));
        labelComponent.setAlignmentX(Component.LEFT_ALIGNMENT);
        overviewPanel.add(labelComponent);
        
        JTextArea valueArea = new JTextArea(value != null ? value : "N/A");
        valueArea.setEditable(false);
        valueArea.setLineWrap(true);
        valueArea.setWrapStyleWord(true);
        valueArea.setBackground(overviewPanel.getBackground());
        valueArea.setBorder(BorderFactory.createEmptyBorder(5, 20, 10, 5));
        valueArea.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        overviewPanel.add(valueArea);
    }
    
    /**
     * 更新数据流信息 - 使用BugStackTable数据
     */
    private void updateDataFlow(@NotNull FlowSpotVulnerability vulnerability) {
        DefaultTableModel model = (DefaultTableModel) dataFlowTable.getModel();
        model.setRowCount(0);
        
        // 从原始的FlowSpotBugInstance获取注解信息（BugStackTable数据）
//        if (vulnerability.getOriginalBugInstance() != null) {
            Collection<FlowSpotSourceLineAnnotation> annotations = vulnerability.getOriginalBugInstance().getAnnotations();

            for (FlowSpotSourceLineAnnotation annotation : annotations) {
                // 确定节点类型
                String nodeType = annotation.getNodeType();

                // 获取tracked信息（显示标识符名称或代码片段）
                String tracked = annotation.getCode();

                // 获取行号
                String line = String.valueOf(annotation.getStartLine());

                // 获取方法名
                String method = annotation.getMethodName() != null ? annotation.getMethodName() : "Unknown";

                // 获取文件名（只显示文件名，不显示完整路径）
                String fileName = annotation.getSourceFile();
//                if (fileName != null && fileName.contains("/")) {
//                    fileName = fileName.substring(fileName.lastIndexOf("/") + 1);
//                }
//                if (fileName == null) fileName = "Unknown";

                Object[] row = {nodeType, tracked, line, method, fileName};
                model.addRow(row);
            }
//        }
//        } else {
//            // 如果没有原始BugInstance，使用FlowSpotLocation数据作为备选
//            List<FlowSpotLocation> dataFlow = vulnerability.getDataFlowPath();
//            for (int i = 0; i < dataFlow.size(); i++) {
//                FlowSpotLocation location = dataFlow.get(i);
//
//                // 获取tracked信息（优先使用标识符名称）
//                String tracked = location.getIdentifierName() != null ?
//                    location.getIdentifierName() :
//                    (location.getCode() != null ? location.getCode() : "N/A");
//
//                // 获取简单文件名
//                String fileName = location.getSimpleFileName();
//
//                Object[] row = {
//                    location.getNodeType() != null ? location.getNodeType() : "CFG_NODE",
//                    tracked,
//                    String.valueOf(location.getStartLine()),
//                    location.getMethodName() != null ? location.getMethodName() : "Unknown",
//                    fileName
//                };
//                model.addRow(row);
//            }
//        }
    }
    
    /**
     * 更新注解信息
     */
    private void updateAnnotations(@NotNull FlowSpotVulnerability vulnerability) {
        DefaultTableModel model = (DefaultTableModel) annotationsTable.getModel();
        model.setRowCount(0);
        
        List<FlowSpotAnnotation> annotations = vulnerability.getAnnotations();
        for (FlowSpotAnnotation annotation : annotations) {
            Object[] row = {
                annotation.getType() != null ? annotation.getType().toString() : "Unknown",
                annotation.getDescription() != null ? annotation.getDescription() : "",
                annotation.getValue() != null ? annotation.getValue() : ""
            };
            model.addRow(row);
        }
    }
    
    /**
     * 更新详细信息
     */
    private void updateDetails(@NotNull FlowSpotVulnerability vulnerability) {
        String htmlDetails = vulnerability.getHtmlDetails();
        if (htmlDetails != null && !htmlDetails.trim().isEmpty()) {
            detailsPane.setText(htmlDetails);
        } else {
            // 生成默认的HTML详细信息
            StringBuilder sb = new StringBuilder();
            sb.append("<html><body style='font-family: sans-serif; margin: 10px;'>");
            sb.append("<h2>").append(escapeHtml(vulnerability.getTitle())).append("</h2>");
            sb.append("<p><strong>Type:</strong> ").append(escapeHtml(vulnerability.getType())).append("</p>");
            sb.append("<p><strong>Category:</strong> ").append(escapeHtml(vulnerability.getCategory())).append("</p>");
            sb.append("<p><strong>Severity:</strong> ").append(escapeHtml(vulnerability.getSeverity())).append("</p>");
            sb.append("<h3>Description</h3>");
            sb.append("<p>").append(escapeHtml(vulnerability.getDescription())).append("</p>");
            
            if (vulnerability.getPrimaryLocation() != null) {
                FlowSpotLocation location = vulnerability.getPrimaryLocation();
                sb.append("<h3>Location</h3>");
                sb.append("<p><strong>File:</strong> ").append(escapeHtml(location.getFileName())).append("</p>");
                sb.append("<p><strong>Line:</strong> ").append(location.getStartLine()).append("</p>");
                if (location.getMethodName() != null) {
                    sb.append("<p><strong>Method:</strong> ").append(escapeHtml(location.getMethodName())).append("</p>");
                }
            }
            
            sb.append("</body></html>");
            detailsPane.setText(sb.toString());
        }
        
        // 滚动到顶部
        SwingUtilities.invokeLater(() -> detailsPane.setCaretPosition(0));
    }
    
    /**
     * HTML转义
     */
    private String escapeHtml(String text) {
        if (text == null) return "";
        return text.replace("&", "&amp;")
                  .replace("<", "&lt;")
                  .replace(">", "&gt;")
                  .replace("\"", "&quot;")
                  .replace("'", "&#39;");
    }


    
    /**
     * 导航到源代码位置，支持精确的列定位和代码高亮
     */
    private void navigateToSource(int row) {
        if (currentVulnerability == null || currentVulnerability.getOriginalBugInstance() == null) {
            return;
        }

        DefaultTableModel model = (DefaultTableModel) dataFlowTable.getModel();
        if (row >= model.getRowCount()) {
            return;
        }

        // 获取行数据
        String lineStr = (String) model.getValueAt(row, 2); // line列
        String fileName = (String) model.getValueAt(row, 4); // file列

        try {
            int lineNumber = Integer.parseInt(lineStr);

            // 从原始注解中获取完整文件路径和字节码信息
            Collection<FlowSpotSourceLineAnnotation> annotations =
                currentVulnerability.getOriginalBugInstance().getAnnotations();

            FlowSpotSourceLineAnnotation targetAnnotation = null;
            int currentRow = 0;
            for (FlowSpotSourceLineAnnotation annotation : annotations) {
                if (currentRow == row) {
                    targetAnnotation = annotation;
                    break;
                }
                currentRow++;
            }

            if (targetAnnotation != null) {
                String sourceFile = targetAnnotation.getSourceFile();
                if (sourceFile != null) {
                    // 构建正确的文件路径：项目路径 + 源文件路径
                    String fullPath = constructFullFilePath(sourceFile);

                    // 尝试找到虚拟文件
                    VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fullPath);
                    if (virtualFile != null) {
                        // 打开文件并实现精确的列定位和高亮
                        openFileWithPreciseLocation(virtualFile, targetAnnotation, lineNumber);
                    }
                }
            }
        } catch (NumberFormatException e) {
            // 行号解析失败，忽略
        }
    }

    /**
     * 打开文件并实现精确的列定位和代码高亮
     */
    private void openFileWithPreciseLocation(@NotNull VirtualFile virtualFile,
                                           @NotNull FlowSpotSourceLineAnnotation annotation,
                                           int lineNumber) {
        ApplicationManager.getApplication().invokeLater(() -> {
            // 打开文件
            OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, lineNumber - 1, 0);
            Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true);

            if (editor != null) {
                // 实现精确的列定位和高亮
                highlightCodeRange(editor, annotation, lineNumber);
            }
        });
    }

    /**
     * 在编辑器中高亮指定的代码范围
     */
    private void highlightCodeRange(@NotNull Editor editor,
                                  @NotNull FlowSpotSourceLineAnnotation annotation,
                                  int lineNumber) {
        Document document = editor.getDocument();

        // 确保行号有效
        if (lineNumber <= 0 || lineNumber > document.getLineCount()) {
            return;
        }

        int lineStartOffset = document.getLineStartOffset(lineNumber - 1);
        int lineEndOffset = document.getLineEndOffset(lineNumber - 1);

        // 计算精确的列位置
        int startOffset = lineStartOffset;
        int endOffset = lineEndOffset;

        // 直接使用 startBytecode 和 endBytecode 作为准确的列位置
        if (annotation.getStartBytecode() >= 0 && annotation.getEndBytecode() >= 0) {
            // startBytecode 和 endBytecode 就是准确的列偏移
            int startColumn = annotation.getStartBytecode() -1;
            int endColumn = annotation.getEndBytecode() -1 ;
            
            // 确保列位置在行范围内
            int lineLength = lineEndOffset - lineStartOffset;
            if (startColumn >= 0 && startColumn <= lineLength) {
                startOffset = lineStartOffset + startColumn-1;
            }
            if (endColumn >= 0 && endColumn <= lineLength && endColumn > startColumn) {
                endOffset = lineStartOffset + endColumn;
            } else {
                // 如果 endColumn 无效，使用 startColumn + 合理长度
                endOffset = Math.min(startOffset + 10, lineEndOffset);
            }
        }

        // 设置光标位置
        CaretModel caretModel = editor.getCaretModel();
        caretModel.moveToOffset(startOffset+1);

        // 选中代码范围
        SelectionModel selectionModel = editor.getSelectionModel();
        selectionModel.setSelection(startOffset+1, endOffset+1);

        // 添加高亮
        addHighlight(editor, startOffset+1, endOffset+1);

        // 滚动到可见区域
        editor.getScrollingModel().scrollToCaret(com.intellij.openapi.editor.ScrollType.CENTER);
    }

    /**
     * 添加代码高亮 - 使用统一的高亮服务
     */
    private void addHighlight(@NotNull Editor editor, int startOffset, int endOffset) {
        com.flowspot.intellij.service.FlowSpotHighlightService.getInstance()
            .addHighlight(editor, startOffset, endOffset);
    }
    

    private String constructFullFilePath(@NotNull String sourceFile) {
        // 如果已经是绝对路径，直接返回
        if (sourceFile.startsWith("/") || sourceFile.matches("^[A-Za-z]:.*")) {
            return sourceFile;
        }

        // 获取当前分析的根路径（从漏洞信息中推断或使用项目根路径）
        String analysisBasePath = determineAnalysisBasePath();
        if (analysisBasePath == null) {
            return sourceFile;
        }

        // 直接使用分析基础路径拼接源文件
        String fullPath = analysisBasePath + "/" + sourceFile;

        try {
            String normalizedPath = java.nio.file.Paths.get(fullPath).normalize().toString();
            VirtualFile testFile = LocalFileSystem.getInstance().findFileByPath(normalizedPath);
            if (testFile != null && testFile.exists()) {
                return normalizedPath;
            }
        } catch (Exception e) {
            // 如果规范化失败，返回原始路径
        }

        // 如果文件不存在，仍然返回构建的路径（用于后续搜索）
        try {
            return java.nio.file.Paths.get(fullPath).normalize().toString();
        } catch (Exception e) {
            return fullPath;
        }
    }

    /**
     * 确定分析的基础路径
     * 优先使用当前漏洞集合中的分析基础路径，如枟无法确定则使用项目根路径
     */
    private String determineAnalysisBasePath() {
        // 从当前漏洞集合中获取分析基础路径
        FlowSpotVulnerabilityCollection currentCollection = getCurrentVulnerabilityCollection();
        if (currentCollection != null && currentCollection.getAnalysisBasePath() != null) {
            return currentCollection.getAnalysisBasePath();
        }

        // 后备方案：使用项目根路径
        return project.getBasePath();
    }

    /**
     * 获取当前的漏洞集合
     */
    private FlowSpotVulnerabilityCollection getCurrentVulnerabilityCollection() {
        // 通过父组件获取当前的漏洞集合
        Component parent = getParent();
        while (parent != null) {
            if (parent instanceof FlowSpotToolWindowPanel) {
                return ((FlowSpotToolWindowPanel) parent).getCurrentCollection();
            }
            parent = parent.getParent();
        }
        return null;
    }



    /**
     * 递归搜索文件
     */
    private VirtualFile findFileRecursively(@NotNull VirtualFile directory, @NotNull String fileName) {
        if (!directory.isDirectory()) {
            return null;
        }

        for (VirtualFile child : directory.getChildren()) {
            if (child.isDirectory()) {
                VirtualFile found = findFileRecursively(child, fileName);
                if (found != null) {
                    return found;
                }
            } else if (fileName.equals(child.getName())) {
                return child;
            }
        }

        return null;
    }

}


