///*
// * Copyright 2024 FlowSpot plugin contributors
// *
// * This file is part of IntelliJ FlowSpot plugin.
// *
// * IntelliJ FlowSpot plugin is free software: you can redistribute it
// * and/or modify it under the terms of the GNU General Public License
// * as published by the Free Software Foundation, either version 3 of
// * the License, or (at your option) any later version.
// *
// * IntelliJ FlowSpot plugin is distributed in the hope that it will
// * be useful, but WITHOUT ANY WARRANTY; without even the implied
// * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// * See the GNU General Public License for more details.
// *
// * You should have received a copy of the GNU General Public License
// * along with IntelliJ FlowSpot plugin.
// * If not, see <http://www.gnu.org/licenses/>.
// */
//package com.flowspot.intellij.core;
//
//import com.flowspot.intellij.model.FlowSpotAnnotation;
//import com.flowspot.intellij.model.FlowSpotLocation;
//import com.flowspot.intellij.model.FlowSpotVulnerability;
//import omni.flowspot.annotations.FlowSpotEnhancedSourceLineAnnotation;
//import omni.flowspot.annotations.FlowSpotSourceLineAnnotation;
//import omni.flowspot.core.FlowSpotBugInstance;
//import org.jetbrains.annotations.NotNull;
//import org.jetbrains.annotations.Nullable;
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Map;
//import java.util.UUID;
//import java.util.logging.Logger;
//
///**
// * FlowSpot 漏洞转换器
// * 将 FlowSpotBugInstance 转换为 UI 数据模型
// */
//public class FlowSpotVulnerabilityConverter {
//
//    private static final Logger logger = Logger.getLogger(FlowSpotVulnerabilityConverter.class.getName());
//
//    /**
//     * 转换单个 FlowSpotBugInstance 为 FlowSpotVulnerability
//     */
//    @Nullable
//    public static FlowSpotVulnerability convert(@NotNull FlowSpotBugInstance bugInstance) {
//        try {
//            // 生成唯一ID
//            String id = generateVulnerabilityId(bugInstance);
//
//            // 获取基本信息
//            String type = bugInstance.getType();
//            String category = bugInstance.getCategory(); // 直接从 FlowSpotBugInstance 获取 category
//            String title = extractTitle(bugInstance);
//            String description = extractDescription(bugInstance);
//            int priority = bugInstance.getPriority();
//            String severity = convertPriorityToSeverity(priority);
//
//            // 调试信息：记录category分类结果
//            logger.info("FlowSpotVulnerabilityConverter: type=" + type + ", category=" + category + " (from FlowSpotBugInstance)");
//
//            // 获取主要位置
//            FlowSpotLocation primaryLocation = extractPrimaryLocation(bugInstance);
//            if (primaryLocation == null) {
//                return null; // 没有位置信息的漏洞无法显示
//            }
//
//            // 获取数据流路径
//            List<FlowSpotLocation> dataFlowPath = extractDataFlowPath(bugInstance);
//
//            // 获取注解信息
//            List<FlowSpotAnnotation> annotations = extractAnnotations(bugInstance);
//
//            // 生成HTML详情
//            String htmlDetails = generateHtmlDetails(bugInstance);
//
//            return new FlowSpotVulnerability(
//                id, type, category, title, description, priority, severity,
//                primaryLocation, dataFlowPath, annotations, htmlDetails, bugInstance
//            );
//
//        } catch (Exception e) {
//            // 转换失败时返回null，由调用者处理
//            return null;
//        }
//    }
//
//    /**
//     * 生成漏洞唯一ID
//     */
//    @NotNull
//    private static String generateVulnerabilityId(@NotNull FlowSpotBugInstance bugInstance) {
//        // 基于类型、位置等信息生成稳定的ID
//        StringBuilder sb = new StringBuilder();
//        sb.append(bugInstance.getType());
//
//        FlowSpotSourceLineAnnotation primaryAnnotation = bugInstance.getPrimarySourceLineAnnotation();
//        if (primaryAnnotation != null) {
//            sb.append("_").append(primaryAnnotation.getClassName());
//            sb.append("_").append(primaryAnnotation.getStartLine());
//        }
//
//        // 如果无法生成稳定ID，使用随机UUID
//        if (sb.length() <= bugInstance.getType().length()) {
//            return UUID.randomUUID().toString();
//        }
//
//        return sb.toString().replaceAll("[^a-zA-Z0-9_]", "_");
//    }
//
//    /**
//     * 根据类型确定分类 - 支持JSON规则和内置规则的混合分类
//     * @deprecated 现在直接从 FlowSpotBugInstance.getCategory() 获取分类，不再需要类型推断
//     */
//
//
//    /**
//     * 提取漏洞标题
//     */
//    @NotNull
//    private static String extractTitle(@NotNull FlowSpotBugInstance bugInstance) {
//        String type = bugInstance.getType();
//
//        // 尝试从类型名称生成友好的标题
//        if (type.startsWith("FLOWSPOT_")) {
//            String friendlyName = type.substring("FLOWSPOT_".length())
//                                     .replace("_", " ")
//                                     .toLowerCase();
//            return capitalizeWords(friendlyName);
//        }
//
//        return type;
//    }
//
//    /**
//     * 提取漏洞描述
//     */
//    @NotNull
//    private static String extractDescription(@NotNull FlowSpotBugInstance bugInstance) {
//        // 尝试从 BugPattern 获取描述
//        if (bugInstance.getBugPattern() != null) {
//            String shortDescription = bugInstance.getBugPattern().getShortDescription();
//            if (shortDescription != null && !shortDescription.isEmpty()) {
//                return shortDescription;
//            }
//        }
//
//        // 生成默认描述
//        return "FlowSpot detected a potential security vulnerability of type: " + bugInstance.getType();
//    }
//
//    /**
//     * 转换优先级为严重程度
//     */
//    @NotNull
//    private static String convertPriorityToSeverity(int priority) {
//        switch (priority) {
//            case 1: return "High";
//            case 2: return "Medium";
//            case 3: return "Low";
//            default: return "Unknown";
//        }
//    }
//
//    /**
//     * 提取主要位置信息
//     */
//    @Nullable
//    private static FlowSpotLocation extractPrimaryLocation(@NotNull FlowSpotBugInstance bugInstance) {
//        FlowSpotSourceLineAnnotation annotation = bugInstance.getPrimarySourceLineAnnotation();
//        if (annotation == null) {
//            return null;
//        }
//
//        return convertSourceLineAnnotationToLocation(annotation);
//    }
//
//    /**
//     * 提取数据流路径
//     */
//    @NotNull
//    private static List<FlowSpotLocation> extractDataFlowPath(@NotNull FlowSpotBugInstance bugInstance) {
//        List<FlowSpotLocation> dataFlowPath = new ArrayList<>();
//
//        // 遍历所有注解，提取位置信息
//        for (FlowSpotSourceLineAnnotation annotation : bugInstance.getAnnotations()) {
//            FlowSpotLocation location = convertSourceLineAnnotationToLocation(annotation);
//            if (location != null) {
//                dataFlowPath.add(location);
//            }
//        }
//
//        return dataFlowPath;
//    }
//
//    /**
//     * 提取注解信息
//     */
//    @NotNull
//    private static List<FlowSpotAnnotation> extractAnnotations(@NotNull FlowSpotBugInstance bugInstance) {
//        List<FlowSpotAnnotation> annotations = new ArrayList<>();
//
//        for (FlowSpotSourceLineAnnotation sourceAnnotation : bugInstance.getAnnotations()) {
//            FlowSpotAnnotation.AnnotationType type = FlowSpotAnnotation.AnnotationType.SOURCE_LINE;
//            String description = sourceAnnotation.getDescription();
//            FlowSpotLocation location = convertSourceLineAnnotationToLocation(sourceAnnotation);
//            String pattern = null;
//            String value = null;
//
//            // 如果是增强注解，提取额外信息
//            if (sourceAnnotation instanceof FlowSpotEnhancedSourceLineAnnotation) {
//                FlowSpotEnhancedSourceLineAnnotation enhanced =
//                    (FlowSpotEnhancedSourceLineAnnotation) sourceAnnotation;
//                type = FlowSpotAnnotation.AnnotationType.ENHANCED_SOURCE_LINE;
//                pattern = enhanced.getPattern();
//            }
//
//            FlowSpotAnnotation annotation = new FlowSpotAnnotation(
//                type, description != null ? description : "Source line annotation",
//                location, pattern, value
//            );
//            annotations.add(annotation);
//        }
//
//        return annotations;
//    }
//
//    /**
//     * 转换 SourceLineAnnotation 为 FlowSpotLocation
//     */
//    @Nullable
//    private static FlowSpotLocation convertSourceLineAnnotationToLocation(
//            @NotNull FlowSpotSourceLineAnnotation annotation) {
//
//        String className = annotation.getClassName();
//        String fileName = annotation.getSourceFile();
//        String methodName = null;
//        int startLine = annotation.getStartLine();
//        int endLine = annotation.getEndLine();
//        int startColumn = annotation.getStartBytecode();
//        int endColumn = annotation.getEndBytecode();
//        String nodeType = null;
//        String identifierName = null;
//        String description = annotation.getDescription();
//
//        // 处理增强注解的额外信息
//        if (annotation instanceof FlowSpotEnhancedSourceLineAnnotation) {
//            FlowSpotEnhancedSourceLineAnnotation enhanced =
//                (FlowSpotEnhancedSourceLineAnnotation) annotation;
//            if (enhanced.getMethodName() != null) {
//                methodName = enhanced.getMethodName();
//            }
//        }
//
//        return new FlowSpotLocation(
//            className != null ? className : "Unknown",
//            fileName != null ? fileName : "Unknown",
//            methodName,
//            startLine, endLine, startColumn, endColumn,
//            nodeType, identifierName, description
//        );
//    }
//
//    /**
//     * 生成HTML详情
//     */
//    @Nullable
//    private static String generateHtmlDetails(@NotNull FlowSpotBugInstance bugInstance) {
//        StringBuilder html = new StringBuilder();
//        html.append("<html><body>");
//        html.append("<h3>").append(bugInstance.getType()).append("</h3>");
//
//        if (bugInstance.getBugPattern() != null) {
//            String longDescription = bugInstance.getBugPattern().getLongDescription();
//            if (longDescription != null && !longDescription.isEmpty()) {
//                html.append("<p>").append(longDescription).append("</p>");
//            }
//        }
//
//        html.append("<h4>Details:</h4>");
//        html.append("<ul>");
//        html.append("<li>Priority: ").append(bugInstance.getPriority()).append("</li>");
//        html.append("<li>Type: ").append(bugInstance.getType()).append("</li>");
//        html.append("</ul>");
//
//        html.append("</body></html>");
//        return html.toString();
//    }
//
//    /**
//     * 首字母大写
//     */
//    @NotNull
//    private static String capitalizeWords(@NotNull String str) {
//        StringBuilder result = new StringBuilder();
//        boolean capitalizeNext = true;
//
//        for (char c : str.toCharArray()) {
//            if (Character.isWhitespace(c)) {
//                capitalizeNext = true;
//                result.append(c);
//            } else if (capitalizeNext) {
//                result.append(Character.toUpperCase(c));
//                capitalizeNext = false;
//            } else {
//                result.append(c);
//            }
//        }
//
//        return result.toString();
//    }
//}
